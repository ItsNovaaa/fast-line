// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: circuit.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countCircuits = `-- name: CountCircuits :one
SELECT COUNT(*)
FROM circuits
`

func (q *Queries) CountCircuits(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCircuits)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCircuit = `-- name: CreateCircuit :one
INSERT INTO circuits (name, circuit_name, start_date, end_date, status)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, circuit_name, start_date, end_date, status, created_at, updated_at
`

type CreateCircuitParams struct {
	Name        string
	CircuitName string
	StartDate   time.Time
	EndDate     time.Time
	Status      int32
}

func (q *Queries) CreateCircuit(ctx context.Context, arg CreateCircuitParams) (Circuit, error) {
	row := q.db.QueryRowContext(ctx, createCircuit,
		arg.Name,
		arg.CircuitName,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Circuit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CircuitName,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCircuit = `-- name: DeleteCircuit :exec
UPDATE circuits
SET status = 0, updated_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteCircuit(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCircuit, id)
	return err
}

const getActiveCircuits = `-- name: GetActiveCircuits :many
SELECT id, name, circuit_name, start_date, end_date, status, created_at, updated_at
FROM circuits
WHERE status = 1
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetActiveCircuitsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetActiveCircuits(ctx context.Context, arg GetActiveCircuitsParams) ([]Circuit, error) {
	rows, err := q.db.QueryContext(ctx, getActiveCircuits, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Circuit
	for rows.Next() {
		var i Circuit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CircuitName,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCircuitByID = `-- name: GetCircuitByID :one
SELECT id, name, circuit_name, start_date, end_date, status, created_at, updated_at
FROM circuits
WHERE id = $1
`

func (q *Queries) GetCircuitByID(ctx context.Context, id uuid.UUID) (Circuit, error) {
	row := q.db.QueryRowContext(ctx, getCircuitByID, id)
	var i Circuit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CircuitName,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCircuits = `-- name: ListCircuits :many
SELECT id, name, circuit_name, start_date, end_date, status, created_at, updated_at
FROM circuits
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCircuitsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCircuits(ctx context.Context, arg ListCircuitsParams) ([]Circuit, error) {
	rows, err := q.db.QueryContext(ctx, listCircuits, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Circuit
	for rows.Next() {
		var i Circuit
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CircuitName,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCircuit = `-- name: UpdateCircuit :one
UPDATE circuits
SET name = $2, circuit_name = $3, start_date = $4, end_date = $5, status = $6, updated_at = NOW()   
WHERE id = $1
RETURNING id, name, circuit_name, start_date, end_date, status, created_at, updated_at
`

type UpdateCircuitParams struct {
	ID          uuid.UUID
	Name        string
	CircuitName string
	StartDate   time.Time
	EndDate     time.Time
	Status      int32
}

func (q *Queries) UpdateCircuit(ctx context.Context, arg UpdateCircuitParams) (Circuit, error) {
	row := q.db.QueryRowContext(ctx, updateCircuit,
		arg.ID,
		arg.Name,
		arg.CircuitName,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Circuit
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CircuitName,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
